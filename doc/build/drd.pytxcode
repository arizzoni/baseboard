=>PYTHONTEX#CC:py:begin#none#none#0#code#romanfont=\TU/STIXTwoText-Regular.otf(0)/m/n/24.88, romanboldfont=\TU/STIXTwoText-Regular.otf(0)/b/n/24.88, romanitalicfont=\TU/STIXTwoText-Regular.otf(0)/m/it/24.88, romanbolditalicfont=\TU/STIXTwoText-Regular.otf(0)/b/it/24.88, sansfont=\TU/InterMedium(0)/m/n/24.88, sansboldfont=\TU/InterMedium(0)/b/n/24.88, sansitalicfont=\TU/InterMedium(0)/b/n/24.88, sansbolditalicfont=\TU/InterMedium(0)/b/it/24.88, monofont=\TU/IosevkaFixed(0)/m/n/24.88, monoboldfont=\TU/IosevkaFixed(0)/b/n/24.88, monoitalicfont=\TU/IosevkaFixed(0)/m/it/24.88, monobolditalicfont=\TU/IosevkaFixed(0)/b/it/24.88, mathfont=\TU/STIXTwoMath-Regular.otf(1)/m/n/10, mathfontone=\OML/cmm/m/it/10, mathfonttwo=\TU/STIXTwoMath-Regular.otf(2)/m/n/10, mathfontthree=\TU/STIXTwoMath-Regular.otf(3)/m/n/10, scsansfont = \TU/InterMedium(0)/m/sc/24.88, scromanfont = \TU/STIXTwoText-Regular.otf(0)/m/sc/24.88, scmonofont = \TU/IosevkaFixed(0)/m/sc/24.88, scsansboldfont = \TU/InterMedium(0)/b/sc/24.88, scromanboldfont = \TU/STIXTwoText-Regular.otf(0)/b/sc/24.88, scmonoboldfont = \TU/IosevkaFixed(0)/b/sc/24.88, slantedsansfont = \TU/InterMedium(0)/b/sc/24.88, slantedromanfont = \TU/STIXTwoText-Regular.otf(0)/m/it/24.88, slantedmonofont = \TU/IosevkaFixed(0)/m/it/24.88, slantedsansboldfont = \TU/InterMedium(0)/b/sl/24.88, slantedromanboldfont = \TU/STIXTwoText-Regular.otf(0)/b/it/24.88, slantedmonoboldfont = \TU/IosevkaFixed(0)/b/it/24.88, tiny=5, scriptsize=7, footnotesize=8, small=9, normalsize=10, large=12, Large=14.4, LARGE=17.28, huge=20.74, Huge=24.88, baselineskip=30.0pt, columnsep=10.0pt, columnwidth=345.0pt, evensidemargin=0.0pt, linewidth=345.0pt, oddsidemargin=0.0pt, paperwidth=614.295pt, paperheight=794.96999pt, parindent=15.0pt, parskip=0.0pt plus 1.0pt, textheight=650.43001pt, textwidth=469.75502pt, topmargin=-37.0pt, unitlength=1.0pt, in=72.26999pt, cm=28.45274pt, mm=2.84526pt, em=10.0pt, ex=4.73pt, bp=1.00374pt, dd=1.07pt, pc=12.0pt####228#
import os # File management utilities
import numpy as np # Python numerical computing library
import matplotlib as mpl # Plotting library
from cycler import cycler # Property cycler utilities
from matplotlib import pyplot as plt # Pyplot API
from matplotlib import rcParams as rc # Matplotlib plot styling
from matplotlib.ticker import EngFormatter # Plot tick formatting

class Environment():

    build_directory = os.path.abspath(os.getcwd())
    output_directory = os.sep.join(build_directory.split(os.sep)[:-1])
    figures_directory = os.path.join(build_directory, 'figures')
    pgf_directory = os.path.join(figures_directory, 'pgf')
    pdf_directory = os.path.join(figures_directory, 'pdf')

    def __init__(self):
        figure_directories = [ self.figures_directory, self.pgf_directory, self.pdf_directory ]
        for directory in figure_directories:
            if not os.path.exists(directory):
                os.mkdir(directory)

environment = Environment()

def signif(x, p):
    x = np.asarray(x)
    x_positive = np.where(np.isfinite(x) & (x != 0), np.abs(x), 10**(p-1))
    mags = 10 ** (p - 1 - np.floor(np.log10(x_positive)))
    return np.round(x * mags) / mags

def metallic_ratio(n):
    return 0.5 * ( n + np.sqrt(n**2 + 4) )

def eng_format(arg: str):
    return EngFormatter(unit=arg, sep=r'\,')

def save_pythontex_figure(figure, figure_name):
    if type(figure) == mpl.figure.Figure:
        figure.savefig(os.path.join(environment.pgf_directory, f'{figure_name}.pgf'))
        figure.savefig(os.path.join(environment.pdf_directory, f'{figure_name}.pdf'))
    return figure

def find_closest_e_series_number(value, target):
    """
    Returns closest E-series number to {value}. If {target} (in percent) is not
    specified, return closest value to an E192 number.

    Numbers from https://en.wikipedia.org/wiki/E_series_of_preferred_numbers
    """

    # 40% tolerance
    e_3 = [ 1.0, 2.2, 4.7 ]

    # 20% tolerance
    e_6 = [ 1.0, 1.5, 2.2, 3.3, 4.7, 6.8 ]

    # 10% tolerance
    e_12 = [ 1.0, 1.2, 1.5, 1.8, 2.2, 2.7, 3.3, 3.9, 4.7, 5.6, 6.8, 8.2 ]

    # 5% tolerance
    e_24 = [ 1.0, 1.1, 1.2, 1.3, 1.5, 1.6, 1.8, 2.0, 2.2, 2.4, 2.7, 3.0, 3.3,
           3.6, 3.9, 4.3, 4.7, 5.1, 5.6, 6.2, 6.8, 7.5, 8.2, 9.1 ]

    # 2% tolerance
    e_48 = [ 1.00, 1.05, 1.10, 1.15, 1.21, 1.27, 1.33, 1.40, 1.47, 1.54, 1.62,
           1.69, 1.78, 1.87, 1.96, 2.05, 2.15, 2.26, 2.37, 2.49, 2.61, 2.74,
           2.87, 3.01, 3.16, 3.32, 3.48, 3.65, 3.83, 4.02, 4.22, 4.42, 4.64,
           4.87, 5.11, 5.36, 5.62, 5.90, 6.19, 6.49, 6.81, 7.15, 7.50, 7.87,
           8.25, 8.66, 9.09, 9.53 ]

    # 1% tolerance
    e_96 = [ 1.00, 1.02, 1.05, 1.07, 1.10, 1.13, 1.15, 1.18, 1.21, 1.24, 1.27,
           1.30, 1.33, 1.37, 1.40, 1.43, 1.47, 1.50, 1.54, 1.58, 1.62, 1.65,
           1.69, 1.74, 1.78, 1.82, 1.87, 1.91, 1.96, 2.00, 2.05, 2.10, 2.15,
           2.21, 2.26, 2.32, 2.37, 2.43, 2.49, 2.55, 2.61, 2.67, 2.74, 2.80,
           2.87, 2.94, 3.01, 3.09, 3.16, 3.24, 3.32, 3.40, 3.48, 3.57, 3.65,
           3.74, 3.83, 3.92, 4.02, 4.12, 4.22, 4.32, 4.42, 4.53, 4.64, 4.75,
           4.87, 4.99, 5.11, 5.23, 5.36, 5.49, 5.62, 5.76, 5.90, 6.04, 6.19,
           6.34, 6.49, 6.65, 6.81, 6.98, 7.15, 7.32, 7.50, 7.68, 7.87, 8.06,
           8.25, 8.45, 8.66, 8.87, 9.09, 9.31, 9.53, 9.76 ]

    # 0.5% tolerance
    e_192 = [ 1.00, 1.01, 1.02, 1.04, 1.05, 1.06, 1.07, 1.09, 1.10, 1.11, 1.13,
            1.14, 1.15, 1.17, 1.18, 1.20, 1.21, 1.23, 1.24, 1.26, 1.27, 1.29,
            1.30, 1.32, 1.33, 1.35, 1.37, 1.38, 1.40, 1.42, 1.43, 1.45, 1.47,
            1.49, 1.50, 1.52, 1.54, 1.56, 1.58, 1.60, 1.62, 1.64, 1.65, 1.67,
            1.69, 1.72, 1.74, 1.76, 1.78, 1.80, 1.82, 1.84, 1.87, 1.89, 1.91,
            1.93, 1.96, 1.98, 2.00, 2.03, 2.05, 2.08, 2.10, 2.13, 2.15, 2.18,
            2.21, 2.23, 2.26, 2.29, 2.32, 2.34, 2.37, 2.40, 2.43, 2.46, 2.49,
            2.52, 2.55, 2.58, 2.61, 2.64, 2.67, 2.71, 2.74, 2.77, 2.80, 2.84,
            2.87, 2.91, 2.94, 2.98, 3.01, 3.05, 3.09, 3.12, 3.16, 3.20, 3.24,
            3.28, 3.32, 3.36, 3.40, 3.44, 3.48, 3.52, 3.57, 3.61, 3.65, 3.70,
            3.74, 3.79, 3.83, 3.88, 3.92, 3.97, 4.02, 4.07, 4.12, 4.17, 4.22,
            4.27, 4.32, 4.37, 4.42, 4.48, 4.53, 4.59, 4.64, 4.70, 4.75, 4.81,
            4.87, 4.93, 4.99, 5.05, 5.11, 5.17, 5.23, 5.30, 5.36, 5.42, 5.49,
            5.56, 5.62, 5.69, 5.76, 5.83, 5.90, 5.97, 6.04, 6.12, 6.19, 6.26,
            6.34, 6.42, 6.49, 6.57, 6.65, 6.73, 6.81, 6.90, 6.98, 7.06, 7.15,
            7.23, 7.32, 7.41, 7.50, 7.59, 7.68, 7.77, 7.87, 7.96, 8.06, 8.16,
            8.25, 8.35, 8.45, 8.56, 8.66, 8.76, 8.87, 8.98, 9.09, 9.20, 9.31,
            9.42, 9.53, 9.65, 9.76, 9.88 ]

    match target:
        case '40%':
            target = np.array(e_3)
        case '20%':
            target = np.array(e_6)
        case '10%':
            target = np.array(e_12)
        case '5%':
            target = np.array(e_24)
        case '2%':
            target = np.array(e_48)
        case '1%':
            target = np.array(e_96)
        case '0.5%':
            target = np.array(e_192)
        case _:
            target = np.array(e_192)

    order = np.floor(np.log10(value))
    index = np.searchsorted(target, value / 10**order)
    return target[index-1] * 10**order

class Geometry():

    # Convert from (LaTeX!) points to inches
    # There is ~ 0.14 micron floating point error here
    in_length = float(pytex.context['in'][:-2]) / 72.27
    cm_length = float(pytex.context['cm'][:-2]) / 72.27
    mm_length = float(pytex.context['mm'][:-2]) / 72.27
    em_length = float(pytex.context['em'][:-2]) / 72.27
    ex_length = float(pytex.context['ex'][:-2]) / 72.27
    bp_length = float(pytex.context['bp'][:-2]) / 72.27
    dd_length = float(pytex.context['dd'][:-2]) / 72.27
    pc_length = float(pytex.context['pc'][:-2]) / 72.27

    column_width = float(pytex.context['columnwidth'][:-2]) / 72.27
    text_width = float(pytex.context['textwidth'][:-2]) / 72.27
    text_height = float(pytex.context['textheight'][:-2]) / 72.27
    figure_width = column_width - 2 * em_length
    figure_height = figure_width / metallic_ratio(1) # Define figure height as a function of the figure width and the golden ratio

    axis_dimensions = (0, 0, 1, 1) # 0 lr margin, 0 tb margin, 100% figure size

geometry = Geometry()

# Determine font parameters
class Font():
    # Font faces
    roman = pytex.context['romanfont'].split('/')[1][:-3]
    bold_roman = pytex.context['romanboldfont'].split('/')[1][:-3]
    bold_italic_roman = pytex.context['romanbolditalicfont'].split('/')[1][:-3]
    italic_roman = pytex.context['romanitalicfont'].split('/')[1][:-3]
    sans = pytex.context['sansfont'].split('/')[1][:-3]
    mono = pytex.context['monofont'].split('/')[1][:-3]
    math = pytex.context['mathfont'].split('/')[1][:-3]

    # Font sizes
    tiny = pytex.context['tiny']
    script_size = pytex.context['scriptsize']
    footnote_size = pytex.context['footnotesize']
    small = pytex.context['small']
    normal_size = pytex.context['normalsize']
    large = pytex.context['large']
    llarge = pytex.context['Large']
    lllarge = pytex.context['LARGE']
    huge = pytex.context['huge']
    hhuge = pytex.context['Huge']

font = Font() # Instantiate the class for use

# figure settings
cmap = plt.get_cmap('grey') # Select colormap
num_plot_styles = 4 # number of colors for plotting

# Initialize empty lists for plot colors and styles
plot_colors = []
line_styles = []
for i in range(num_plot_styles): # Populate the color and style lists
    plot_colors.append(cmap(1.0 * i/num_plot_styles))
    line_styles.append((0, (i+1, i)))

# Define the main cycler with the two component lists
style_cycler = cycler(color=plot_colors, linestyle=line_styles)

# Document-wide Matplotlib Configuration
rc.update({
        'backend': 'pgf',
        'lines.linewidth': 1,
        'font.family': 'serif',
        'font.size': font.footnote_size,
        'text.usetex': True,
        'axes.prop_cycle': style_cycler,
        'axes.labelsize': font.footnote_size,
        'axes.linewidth': 0.8,
        'xtick.direction': 'in',
        'xtick.top': True,
        'xtick.bottom': True,
        'xtick.minor.visible': True,
        'ytick.direction': 'in',
        'ytick.left': True,
        'ytick.right': True,
        'ytick.minor.visible': True,
        'legend.fontsize': font.footnote_size,
        'legend.fancybox': False,
        'figure.figsize': (geometry.figure_width, geometry.figure_height),
        'figure.dpi': 600,
	'figure.constrained_layout.use': True,
        'figure.constrained_layout.hspace': 0,
        'figure.constrained_layout.wspace': 0,
        'figure.constrained_layout.w_pad': 0,
        'figure.constrained_layout.h_pad': 0,
        'savefig.format': 'pgf',
        'savefig.bbox': 'tight',
        'savefig.transparent': True,
        'pgf.rcfonts': False,
	'pgf.preamble': '\n'.join([
                r'\usepackage{mathtools}',
                r'\usepackage[warnings-off={mathtools-colon, mathtools-overbracket}]{unicode-math}',
                r'\usepackage{lualatex-math}',
                r'\usepackage{siunitx}',
                r'\usepackage{fontspec}',
                r'\setmainfont{%s}[Ligatures=TeX, ItalicFont=%s, BoldFont=%s, BoldItalicFont=%s]' %(font.roman, font.italic_roman, font.bold_roman, font.bold_italic_roman),
                r'\setmathfont{%s}' %(font.math),
                r'\setsansfont{%s}[Ligatures=TeX, Scale=MatchLowercase]' %(font.sans),
                r'\setmonofont{%s}[Ligatures=TeX, Scale=MatchLowercase]' %(font.mono),
		r'\usepackage[USenglish]{babel}',
                r'\usepackage[autostyle=true]{csquotes}'
	]),
        'pgf.texsystem': 'lualatex', # default is xetex, but lualatex is preferred
})

=>PYTHONTEX#py#default#default#0#code#romanfont=\TU/STIXTwoText-Regular.otf(0)/m/n/24.88, romanboldfont=\TU/STIXTwoText-Regular.otf(0)/b/n/24.88, romanitalicfont=\TU/STIXTwoText-Regular.otf(0)/m/it/24.88, romanbolditalicfont=\TU/STIXTwoText-Regular.otf(0)/b/it/24.88, sansfont=\TU/InterMedium(0)/m/n/24.88, sansboldfont=\TU/InterMedium(0)/b/n/24.88, sansitalicfont=\TU/InterMedium(0)/b/n/24.88, sansbolditalicfont=\TU/InterMedium(0)/b/it/24.88, monofont=\TU/IosevkaFixed(0)/m/n/24.88, monoboldfont=\TU/IosevkaFixed(0)/b/n/24.88, monoitalicfont=\TU/IosevkaFixed(0)/m/it/24.88, monobolditalicfont=\TU/IosevkaFixed(0)/b/it/24.88, mathfont=\TU/STIXTwoMath-Regular.otf(1)/m/n/10, mathfontone=\OML/cmm/m/it/10, mathfonttwo=\TU/STIXTwoMath-Regular.otf(2)/m/n/10, mathfontthree=\TU/STIXTwoMath-Regular.otf(3)/m/n/10, scsansfont = \TU/InterMedium(0)/m/sc/24.88, scromanfont = \TU/STIXTwoText-Regular.otf(0)/m/sc/24.88, scmonofont = \TU/IosevkaFixed(0)/m/sc/24.88, scsansboldfont = \TU/InterMedium(0)/b/sc/24.88, scromanboldfont = \TU/STIXTwoText-Regular.otf(0)/b/sc/24.88, scmonoboldfont = \TU/IosevkaFixed(0)/b/sc/24.88, slantedsansfont = \TU/InterMedium(0)/b/sc/24.88, slantedromanfont = \TU/STIXTwoText-Regular.otf(0)/m/it/24.88, slantedmonofont = \TU/IosevkaFixed(0)/m/it/24.88, slantedsansboldfont = \TU/InterMedium(0)/b/sl/24.88, slantedromanboldfont = \TU/STIXTwoText-Regular.otf(0)/b/it/24.88, slantedmonoboldfont = \TU/IosevkaFixed(0)/b/it/24.88, tiny=5, scriptsize=7, footnotesize=8, small=9, normalsize=10, large=12, Large=14.4, LARGE=17.28, huge=20.74, Huge=24.88, baselineskip=12.0pt, columnsep=10.0pt, columnwidth=469.75502pt, evensidemargin=0.0pt, linewidth=469.75502pt, oddsidemargin=0.0pt, paperwidth=614.295pt, paperheight=794.96999pt, parindent=15.0pt, parskip=0.0pt plus 1.0pt, textheight=650.43001pt, textwidth=469.75502pt, topmargin=-37.0pt, unitlength=1.0pt, in=72.26999pt, cm=28.45274pt, mm=2.84526pt, em=10.0pt, ex=4.73pt, bp=1.00374pt, dd=1.07pt, pc=12.0pt####237#

rng = np.random.default_rng()

NTRIALS = 100000

L = np.zeros(NTRIALS)
V_f = np.zeros(NTRIALS)
f_s = np.zeros(NTRIALS)
eta = np.zeros(NTRIALS)
I_lim = np.zeros(NTRIALS)
V_ref = np.zeros(NTRIALS)
R_2 = np.zeros(NTRIALS)
R_1 = np.zeros(NTRIALS)
R_1_nom = np.zeros(NTRIALS)
V_out = np.zeros(NTRIALS)
C_3 = np.zeros(NTRIALS)
C_2 = np.zeros(NTRIALS)
R_load = np.zeros(NTRIALS)
G_ea = np.zeros(NTRIALS)
R_sense = np.zeros(NTRIALS)
f_P1 = np.zeros(NTRIALS)
f_P2 = np.zeros(NTRIALS)
I_P_5V = np.zeros(NTRIALS)
I_P_9V = np.zeros(NTRIALS)
I_P_12V = np.zeros(NTRIALS)
I_out_5V = np.zeros(NTRIALS)
I_out_9V = np.zeros(NTRIALS)
I_out_12V = np.zeros(NTRIALS)
C_out_5V = np.zeros(NTRIALS)
C_out_9V = np.zeros(NTRIALS)
C_out_12V = np.zeros(NTRIALS)
duty_5V = np.zeros(NTRIALS)
duty_9V = np.zeros(NTRIALS)
duty_12V = np.zeros(NTRIALS)
C_s_5V = np.zeros(NTRIALS)
C_s_9V = np.zeros(NTRIALS)
C_s_12V = np.zeros(NTRIALS)
f_RHPZ_5V = np.zeros(NTRIALS)
f_RHPZ_9V = np.zeros(NTRIALS)
f_RHPZ_12V = np.zeros(NTRIALS)
A_5V = np.zeros(NTRIALS)
A_9V = np.zeros(NTRIALS)
A_12V = np.zeros(NTRIALS)
V_outs = np.zeros(NTRIALS)

TOLERANCE = '1%'
V_OUT_NOM = 12
R_2_NOM = 10e3  # Texas Instruments TPS61170
V_ripple = 0.010  # Target ripple voltage = 25mV

i = 0
while i < NTRIALS:
    # Eaton DRQ73-100-R
    L[i] = rng.triangular(0.8*10.3e-6, 10.3e-6, 1.2*10.3e-6)

    # Diodes Inc. DFLS240L-7 or DFLS260L-7
    V_f[i] = rng.normal(0.20, 0.05/6)

    # Texas Instruments TPS611705
    f_s[i] = rng.triangular(1e6, 1.25e6, 1.5e6)
    eta[i] = rng.normal(0.85, 0.07/3)
    I_lim[i] = rng.triangular(0.96, 1.2, 1.44)
    V_ref[i] = rng.triangular(1.204, 1.229, 1.254)

    # Design Parameters
    R_2[i] = rng.triangular(0.99*R_2_NOM, R_2_NOM, 1.01*R_2_NOM)
    R_1_nom[i] = find_closest_e_series_number(
        R_2[i] * ((V_OUT_NOM/V_ref[i]) - 1),
        TOLERANCE
        )
    R_1[i] = rng.triangular(0.99*R_1_nom[i], R_1_nom[i], 1.01*R_1_nom[i])
    V_out[i] = V_ref[i]*((R_1[i] / R_2[i]) + 1)

    # Monte Carlo
    V_ins = [5, 9, 12]
    for V_in in V_ins:
        I_P = 1 / (L[i] * f_s[i] * (1 / (V_out[i] + V_f[i] - V_in) + 1 / V_in))
        I_out = V_in * (I_lim[i] - 0.5*I_P) * eta[i] / V_out[i]
        C_out = find_closest_e_series_number(
            ((V_out[i] - V_in) * I_out) / (V_out[i] * f_s[i] * V_ripple),
            TOLERANCE
            )
        duty = (V_out[i] - V_in) / V_out[i]
        C_s = find_closest_e_series_number(
            (I_out * duty) / (f_s[i] * 0.1 * V_in),
            TOLERANCE
            )
        f_RHPZ = (R_load[i] / (2*np.pi*L[i])) * (V_in / V_out[i])**2
        A = 3.687e6*G_ea[i]*R_load[i]*(V_in/(V_out[i]*R_sense[i]))/V_out[i]

        if V_in == 5:
            I_P_5V[i] = I_P
            I_out_5V[i] = I_out
            C_out_5V[i] = C_out
            duty_5V[i] = duty
            C_s_5V[i] = C_s
            f_RHPZ_5V[i] = f_RHPZ
            A_5V[i] = A
        if V_in == 9:
            I_P_9V[i] = I_P
            I_out_9V[i] = I_out
            C_out_9V[i] = C_out
            duty_9V[i] = duty
            C_s_9V[i] = C_s
            f_RHPZ_9V[i] = f_RHPZ
            A_9V[i] = A
        if V_in == 12:
            I_P_12V[i] = I_P
            I_out_12V[i] = I_out
            C_out_12V[i] = C_out
            duty_12V[i] = duty
            C_s_12V[i] = C_s
            f_RHPZ_12V[i] = f_RHPZ
            A_12V[i] = A
    i = i + 1

R_1_value = find_closest_e_series_number(np.mean(R_1_nom), TOLERANCE)

C_out_value = find_closest_e_series_number(
    np.nanmax(np.concatenate((C_out_5V, C_out_9V, C_out_12V))),
    TOLERANCE
    )
C_s_value = find_closest_e_series_number(
    np.nanmax(np.concatenate((C_s_5V, C_s_9V, C_s_12V))),
    TOLERANCE
    )

fig, ax = plt.subplots(3, 1)
ax[0].hist(I_out_5V, bins='auto', label=r"$I_{out}(V_{in}=\SI{5}{\volt})$")
ax[1].hist(I_out_9V, bins='auto', label=r"$I_{out}(V_{in}=\SI{9}{\volt})$")
ax[2].hist(I_out_12V, bins='auto', label=r"$I_{out}(V_{in}\SI{12}{\volt})$")
ax[0].xaxis.set_major_formatter(eng_format(r'\unit{\ampere}'))
ax[1].xaxis.set_major_formatter(eng_format(r'\unit{\ampere}'))
ax[2].xaxis.set_major_formatter(eng_format(r'\unit{\ampere}'))
ax[0].legend(loc='upper left')
ax[1].legend(loc='upper left')
ax[2].legend(loc='upper left')
ax[1].set_ylabel(r'Count $\left(1\right)$')
ax[2].set_xlabel(r'Output Current $\left(\unit{\ampere}\right)$')
save_pythontex_figure(fig, 'psu_i_out_monte_carlo')

fig, ax=plt.subplots(3, 1)
ax[0].hist(I_out_5V, bins='auto', density=True, cumulative=True,
           label=r"$I_{out}(V_{in}=\SI{5}{\volt})$"
           )
ax[1].hist(I_out_9V, bins='auto', density=True, cumulative=True,
           label=r"$I_{out}(V_{in}=\SI{9}{\volt})$"
           )
ax[2].hist(I_out_12V, bins='auto', density=True, cumulative=True,
           label=r"$I_{out}(V_{in}\SI{12}{\volt})$"
           )
ax[0].xaxis.set_major_formatter(eng_format(r'\unit{\ampere}'))
ax[1].xaxis.set_major_formatter(eng_format(r'\unit{\ampere}'))
ax[2].xaxis.set_major_formatter(eng_format(r'\unit{\ampere}'))
ax[0].legend(loc='upper left')
ax[1].legend(loc='upper left')
ax[2].legend(loc='upper left')
ax[1].set_ylabel(r'$P\left(I_{out} \leq I_{out_0}\right)$')
ax[2].set_xlabel(r'Output Current $\left(\unit{\ampere}\right)$')
save_pythontex_figure(fig, 'psu_i_out_monte_carlo_cum')

fig, ax=plt.subplots(1, 1)
ax.hist(V_out, bins='auto', label=r"$V_{out}$")
ax.xaxis.set_major_formatter(eng_format(r'\unit{\volt}'))
ax.set_ylabel(r'Count $\left(1\right)$')
ax.set_xlabel(r'Output Voltage $\left(\unit{\volt}\right)$')
save_pythontex_figure(fig, 'psu_v_out_monte_carlo')

fig, ax=plt.subplots(1, 1)
ax.hist(V_out, bins='auto', density=True, cumulative=True, label=r"$V_{out}$")
ax.xaxis.set_major_formatter(eng_format(r'\unit{\volt}'))
ax.set_ylabel(r'$P\left(V_{out} \leq V_{out_0}\right)$')
ax.set_xlabel(r'Output Voltage $\left(\unit{\volt}\right)$')
save_pythontex_figure(fig, 'psu_v_out_monte_carlo_cum')

fig, ax=plt.subplots(3, 1)
ax[0].hist(C_out_5V, bins='auto', label=r"$C_{out}(V_{in}=\SI{5}{\volt})$")
ax[1].hist(C_out_9V, bins='auto', label=r"$C_{out}(V_{in}=\SI{9}{\volt})$")
ax[2].hist(C_out_12V, bins='auto', label=r"$C_{out}(V_{in}\SI{12}{\volt})$")
ax[0].xaxis.set_major_formatter(eng_format(r'\unit{\farad}'))
ax[1].xaxis.set_major_formatter(eng_format(r'\unit{\farad}'))
ax[2].xaxis.set_major_formatter(eng_format(r'\unit{\farad}'))
ax[0].legend(loc='upper left')
ax[1].legend(loc='upper left')
ax[2].legend(loc='upper left')
ax[1].set_ylabel(r'Count $\left(1\right)$')
ax[2].set_xlabel(r'Output Capacitor Size $\left(\unit{\farad}\right)$')
save_pythontex_figure(fig, 'psu_c_out_monte_carlo')

fig, ax=plt.subplots(3, 1)
ax[0].hist(C_out_5V, bins='auto', density=True, cumulative=True,
           label=r"$C_{out}(V_{in}=\SI{5}{\volt})$"
           )
ax[1].hist(C_out_9V, bins='auto', density=True, cumulative=True,
           label=r"$C_{out}(V_{in}=\SI{9}{\volt})$"
           )
ax[2].hist(C_out_12V, bins='auto', density=True, cumulative=True,
           label=r"$C_{out}(V_{in}\SI{12}{\volt})$"
           )
ax[0].xaxis.set_major_formatter(eng_format(r'\unit{\farad}'))
ax[1].xaxis.set_major_formatter(eng_format(r'\unit{\farad}'))
ax[2].xaxis.set_major_formatter(eng_format(r'\unit{\farad}'))
ax[0].legend(loc='upper left')
ax[1].legend(loc='upper left')
ax[2].legend(loc='upper left')
ax[1].set_ylabel(r'$P\left(C_{out} \leq C_{out_0}\right)$')
ax[2].set_xlabel(r'Output Capacitor Size $\left(\unit{\farad}\right)$')
save_pythontex_figure(fig, 'psu_c_out_monte_carlo_cum')

fig, ax=plt.subplots(3, 1)
ax[0].hist(C_s_5V, bins='auto', label=r"$C_{s}(V_{in}=5V)$")
ax[1].hist(C_s_9V, bins='auto', label=r"$C_{s}(V_{in}=9V)$")
ax[2].hist(C_s_12V, bins='auto', label=r"$C_{s}(V_{in}=12V)$")
ax[0].xaxis.set_major_formatter(eng_format(r'\unit{\farad}'))
ax[1].xaxis.set_major_formatter(eng_format(r'\unit{\farad}'))
ax[2].xaxis.set_major_formatter(eng_format(r'\unit{\farad}'))
ax[0].legend(loc='upper left')
ax[1].legend(loc='upper left')
ax[2].legend(loc='upper left')
ax[1].set_ylabel(r'Count $\left(1\right)$')
ax[2].set_xlabel(r'Coupling Capacitor Size $\left(\unit{\farad}\right)$')
save_pythontex_figure(fig, 'psu_c_s_monte_carlo')

fig, ax=plt.subplots(3, 1)
ax[0].hist(C_s_5V, bins='auto', density=True, cumulative=True,
           label=r"$C_{s}(V_{in}=5V)$"
           )
ax[1].hist(C_s_9V, bins='auto', density=True, cumulative=True,
           label=r"$C_{s}(V_{in}=9V)$"
           )
ax[2].hist(C_s_12V, bins='auto', density=True, cumulative=True,
           label=r"$C_{s}(V_{in}=12V)$"
           )
ax[0].xaxis.set_major_formatter(eng_format(r'\unit{\farad}'))
ax[1].xaxis.set_major_formatter(eng_format(r'\unit{\farad}'))
ax[2].xaxis.set_major_formatter(eng_format(r'\unit{\farad}'))
ax[0].legend(loc='upper left')
ax[1].legend(loc='upper left')
ax[2].legend(loc='upper left')
ax[1].set_ylabel(r'$P\left(C_s \leq C_{s_0}\right)$')
ax[2].set_xlabel(r'Coupling Capacitor Size $\left(\unit{\farad}\right)$')
save_pythontex_figure(fig, 'psu_c_s_monte_carlo_cum')

=>PYTHONTEX#py#default#default#1#i#romanfont=\TU/STIXTwoText-Regular.otf(0)/m/n/24.88, romanboldfont=\TU/STIXTwoText-Regular.otf(0)/b/n/24.88, romanitalicfont=\TU/STIXTwoText-Regular.otf(0)/m/it/24.88, romanbolditalicfont=\TU/STIXTwoText-Regular.otf(0)/b/it/24.88, sansfont=\TU/InterMedium(0)/m/n/24.88, sansboldfont=\TU/InterMedium(0)/b/n/24.88, sansitalicfont=\TU/InterMedium(0)/b/n/24.88, sansbolditalicfont=\TU/InterMedium(0)/b/it/24.88, monofont=\TU/IosevkaFixed(0)/m/n/24.88, monoboldfont=\TU/IosevkaFixed(0)/b/n/24.88, monoitalicfont=\TU/IosevkaFixed(0)/m/it/24.88, monobolditalicfont=\TU/IosevkaFixed(0)/b/it/24.88, mathfont=\TU/STIXTwoMath-Regular.otf(1)/m/n/10, mathfontone=\OML/cmm/m/it/10, mathfonttwo=\TU/STIXTwoMath-Regular.otf(2)/m/n/10, mathfontthree=\TU/STIXTwoMath-Regular.otf(3)/m/n/10, scsansfont = \TU/InterMedium(0)/m/sc/24.88, scromanfont = \TU/STIXTwoText-Regular.otf(0)/m/sc/24.88, scmonofont = \TU/IosevkaFixed(0)/m/sc/24.88, scsansboldfont = \TU/InterMedium(0)/b/sc/24.88, scromanboldfont = \TU/STIXTwoText-Regular.otf(0)/b/sc/24.88, scmonoboldfont = \TU/IosevkaFixed(0)/b/sc/24.88, slantedsansfont = \TU/InterMedium(0)/b/sc/24.88, slantedromanfont = \TU/STIXTwoText-Regular.otf(0)/m/it/24.88, slantedmonofont = \TU/IosevkaFixed(0)/m/it/24.88, slantedsansboldfont = \TU/InterMedium(0)/b/sl/24.88, slantedromanboldfont = \TU/STIXTwoText-Regular.otf(0)/b/it/24.88, slantedmonoboldfont = \TU/IosevkaFixed(0)/b/it/24.88, tiny=5, scriptsize=7, footnotesize=8, small=9, normalsize=10, large=12, Large=14.4, LARGE=17.28, huge=20.74, Huge=24.88, baselineskip=12.0pt, columnsep=10.0pt, columnwidth=469.75502pt, evensidemargin=0.0pt, linewidth=469.75502pt, oddsidemargin=0.0pt, paperwidth=614.295pt, paperheight=794.96999pt, parindent=15.0pt, parskip=0.0pt plus 1.0pt, textheight=650.43001pt, textwidth=469.75502pt, topmargin=-37.0pt, unitlength=1.0pt, in=72.26999pt, cm=28.45274pt, mm=2.84526pt, em=10.0pt, ex=4.73pt, bp=1.00374pt, dd=1.07pt, pc=12.0pt####502#
r'\SI{%s}{%s}' % (signif(R_1_value/1000, 3), r'\kilo\ohm' )
=>PYTHONTEX#py#default#default#2#i#romanfont=\TU/STIXTwoText-Regular.otf(0)/m/n/24.88, romanboldfont=\TU/STIXTwoText-Regular.otf(0)/b/n/24.88, romanitalicfont=\TU/STIXTwoText-Regular.otf(0)/m/it/24.88, romanbolditalicfont=\TU/STIXTwoText-Regular.otf(0)/b/it/24.88, sansfont=\TU/InterMedium(0)/m/n/24.88, sansboldfont=\TU/InterMedium(0)/b/n/24.88, sansitalicfont=\TU/InterMedium(0)/b/n/24.88, sansbolditalicfont=\TU/InterMedium(0)/b/it/24.88, monofont=\TU/IosevkaFixed(0)/m/n/24.88, monoboldfont=\TU/IosevkaFixed(0)/b/n/24.88, monoitalicfont=\TU/IosevkaFixed(0)/m/it/24.88, monobolditalicfont=\TU/IosevkaFixed(0)/b/it/24.88, mathfont=\TU/STIXTwoMath-Regular.otf(1)/m/n/10, mathfontone=\OML/cmm/m/it/10, mathfonttwo=\TU/STIXTwoMath-Regular.otf(2)/m/n/10, mathfontthree=\TU/STIXTwoMath-Regular.otf(3)/m/n/10, scsansfont = \TU/InterMedium(0)/m/sc/24.88, scromanfont = \TU/STIXTwoText-Regular.otf(0)/m/sc/24.88, scmonofont = \TU/IosevkaFixed(0)/m/sc/24.88, scsansboldfont = \TU/InterMedium(0)/b/sc/24.88, scromanboldfont = \TU/STIXTwoText-Regular.otf(0)/b/sc/24.88, scmonoboldfont = \TU/IosevkaFixed(0)/b/sc/24.88, slantedsansfont = \TU/InterMedium(0)/b/sc/24.88, slantedromanfont = \TU/STIXTwoText-Regular.otf(0)/m/it/24.88, slantedmonofont = \TU/IosevkaFixed(0)/m/it/24.88, slantedsansboldfont = \TU/InterMedium(0)/b/sl/24.88, slantedromanboldfont = \TU/STIXTwoText-Regular.otf(0)/b/it/24.88, slantedmonoboldfont = \TU/IosevkaFixed(0)/b/it/24.88, tiny=5, scriptsize=7, footnotesize=8, small=9, normalsize=10, large=12, Large=14.4, LARGE=17.28, huge=20.74, Huge=24.88, baselineskip=12.0pt, columnsep=10.0pt, columnwidth=469.75502pt, evensidemargin=0.0pt, linewidth=469.75502pt, oddsidemargin=0.0pt, paperwidth=614.295pt, paperheight=794.96999pt, parindent=15.0pt, parskip=0.0pt plus 1.0pt, textheight=650.43001pt, textwidth=469.75502pt, topmargin=-37.0pt, unitlength=1.0pt, in=72.26999pt, cm=28.45274pt, mm=2.84526pt, em=10.0pt, ex=4.73pt, bp=1.00374pt, dd=1.07pt, pc=12.0pt####503#
r'\SI{%s}{%s}' % (signif(R_2_NOM/1000, 3), r'\kilo\ohm' )
=>PYTHONTEX#py#default#default#3#i#romanfont=\TU/STIXTwoText-Regular.otf(0)/m/n/24.88, romanboldfont=\TU/STIXTwoText-Regular.otf(0)/b/n/24.88, romanitalicfont=\TU/STIXTwoText-Regular.otf(0)/m/it/24.88, romanbolditalicfont=\TU/STIXTwoText-Regular.otf(0)/b/it/24.88, sansfont=\TU/InterMedium(0)/m/n/24.88, sansboldfont=\TU/InterMedium(0)/b/n/24.88, sansitalicfont=\TU/InterMedium(0)/b/n/24.88, sansbolditalicfont=\TU/InterMedium(0)/b/it/24.88, monofont=\TU/IosevkaFixed(0)/m/n/24.88, monoboldfont=\TU/IosevkaFixed(0)/b/n/24.88, monoitalicfont=\TU/IosevkaFixed(0)/m/it/24.88, monobolditalicfont=\TU/IosevkaFixed(0)/b/it/24.88, mathfont=\TU/STIXTwoMath-Regular.otf(1)/m/n/10, mathfontone=\OML/cmm/m/it/10, mathfonttwo=\TU/STIXTwoMath-Regular.otf(2)/m/n/10, mathfontthree=\TU/STIXTwoMath-Regular.otf(3)/m/n/10, scsansfont = \TU/InterMedium(0)/m/sc/24.88, scromanfont = \TU/STIXTwoText-Regular.otf(0)/m/sc/24.88, scmonofont = \TU/IosevkaFixed(0)/m/sc/24.88, scsansboldfont = \TU/InterMedium(0)/b/sc/24.88, scromanboldfont = \TU/STIXTwoText-Regular.otf(0)/b/sc/24.88, scmonoboldfont = \TU/IosevkaFixed(0)/b/sc/24.88, slantedsansfont = \TU/InterMedium(0)/b/sc/24.88, slantedromanfont = \TU/STIXTwoText-Regular.otf(0)/m/it/24.88, slantedmonofont = \TU/IosevkaFixed(0)/m/it/24.88, slantedsansboldfont = \TU/InterMedium(0)/b/sl/24.88, slantedromanboldfont = \TU/STIXTwoText-Regular.otf(0)/b/it/24.88, slantedmonoboldfont = \TU/IosevkaFixed(0)/b/it/24.88, tiny=5, scriptsize=7, footnotesize=8, small=9, normalsize=10, large=12, Large=14.4, LARGE=17.28, huge=20.74, Huge=24.88, baselineskip=12.0pt, columnsep=10.0pt, columnwidth=469.75502pt, evensidemargin=0.0pt, linewidth=469.75502pt, oddsidemargin=0.0pt, paperwidth=614.295pt, paperheight=794.96999pt, parindent=15.0pt, parskip=0.0pt plus 1.0pt, textheight=650.43001pt, textwidth=469.75502pt, topmargin=-37.0pt, unitlength=1.0pt, in=72.26999pt, cm=28.45274pt, mm=2.84526pt, em=10.0pt, ex=4.73pt, bp=1.00374pt, dd=1.07pt, pc=12.0pt####504#
r'\SI{%s}{%s}' % (signif(np.min(V_out), 3), r'\volt')
=>PYTHONTEX#py#default#default#4#i#romanfont=\TU/STIXTwoText-Regular.otf(0)/m/n/24.88, romanboldfont=\TU/STIXTwoText-Regular.otf(0)/b/n/24.88, romanitalicfont=\TU/STIXTwoText-Regular.otf(0)/m/it/24.88, romanbolditalicfont=\TU/STIXTwoText-Regular.otf(0)/b/it/24.88, sansfont=\TU/InterMedium(0)/m/n/24.88, sansboldfont=\TU/InterMedium(0)/b/n/24.88, sansitalicfont=\TU/InterMedium(0)/b/n/24.88, sansbolditalicfont=\TU/InterMedium(0)/b/it/24.88, monofont=\TU/IosevkaFixed(0)/m/n/24.88, monoboldfont=\TU/IosevkaFixed(0)/b/n/24.88, monoitalicfont=\TU/IosevkaFixed(0)/m/it/24.88, monobolditalicfont=\TU/IosevkaFixed(0)/b/it/24.88, mathfont=\TU/STIXTwoMath-Regular.otf(1)/m/n/10, mathfontone=\OML/cmm/m/it/10, mathfonttwo=\TU/STIXTwoMath-Regular.otf(2)/m/n/10, mathfontthree=\TU/STIXTwoMath-Regular.otf(3)/m/n/10, scsansfont = \TU/InterMedium(0)/m/sc/24.88, scromanfont = \TU/STIXTwoText-Regular.otf(0)/m/sc/24.88, scmonofont = \TU/IosevkaFixed(0)/m/sc/24.88, scsansboldfont = \TU/InterMedium(0)/b/sc/24.88, scromanboldfont = \TU/STIXTwoText-Regular.otf(0)/b/sc/24.88, scmonoboldfont = \TU/IosevkaFixed(0)/b/sc/24.88, slantedsansfont = \TU/InterMedium(0)/b/sc/24.88, slantedromanfont = \TU/STIXTwoText-Regular.otf(0)/m/it/24.88, slantedmonofont = \TU/IosevkaFixed(0)/m/it/24.88, slantedsansboldfont = \TU/InterMedium(0)/b/sl/24.88, slantedromanboldfont = \TU/STIXTwoText-Regular.otf(0)/b/it/24.88, slantedmonoboldfont = \TU/IosevkaFixed(0)/b/it/24.88, tiny=5, scriptsize=7, footnotesize=8, small=9, normalsize=10, large=12, Large=14.4, LARGE=17.28, huge=20.74, Huge=24.88, baselineskip=12.0pt, columnsep=10.0pt, columnwidth=469.75502pt, evensidemargin=0.0pt, linewidth=469.75502pt, oddsidemargin=0.0pt, paperwidth=614.295pt, paperheight=794.96999pt, parindent=15.0pt, parskip=0.0pt plus 1.0pt, textheight=650.43001pt, textwidth=469.75502pt, topmargin=-37.0pt, unitlength=1.0pt, in=72.26999pt, cm=28.45274pt, mm=2.84526pt, em=10.0pt, ex=4.73pt, bp=1.00374pt, dd=1.07pt, pc=12.0pt####523#
r'\SI{%s}{%s}' % (signif(C_out_value*1e6, 3), r'\micro\farad')
=>PYTHONTEX#py#default#default#5#i#romanfont=\TU/STIXTwoText-Regular.otf(0)/m/n/24.88, romanboldfont=\TU/STIXTwoText-Regular.otf(0)/b/n/24.88, romanitalicfont=\TU/STIXTwoText-Regular.otf(0)/m/it/24.88, romanbolditalicfont=\TU/STIXTwoText-Regular.otf(0)/b/it/24.88, sansfont=\TU/InterMedium(0)/m/n/24.88, sansboldfont=\TU/InterMedium(0)/b/n/24.88, sansitalicfont=\TU/InterMedium(0)/b/n/24.88, sansbolditalicfont=\TU/InterMedium(0)/b/it/24.88, monofont=\TU/IosevkaFixed(0)/m/n/24.88, monoboldfont=\TU/IosevkaFixed(0)/b/n/24.88, monoitalicfont=\TU/IosevkaFixed(0)/m/it/24.88, monobolditalicfont=\TU/IosevkaFixed(0)/b/it/24.88, mathfont=\TU/STIXTwoMath-Regular.otf(1)/m/n/10, mathfontone=\OML/cmm/m/it/10, mathfonttwo=\TU/STIXTwoMath-Regular.otf(2)/m/n/10, mathfontthree=\TU/STIXTwoMath-Regular.otf(3)/m/n/10, scsansfont = \TU/InterMedium(0)/m/sc/24.88, scromanfont = \TU/STIXTwoText-Regular.otf(0)/m/sc/24.88, scmonofont = \TU/IosevkaFixed(0)/m/sc/24.88, scsansboldfont = \TU/InterMedium(0)/b/sc/24.88, scromanboldfont = \TU/STIXTwoText-Regular.otf(0)/b/sc/24.88, scmonoboldfont = \TU/IosevkaFixed(0)/b/sc/24.88, slantedsansfont = \TU/InterMedium(0)/b/sc/24.88, slantedromanfont = \TU/STIXTwoText-Regular.otf(0)/m/it/24.88, slantedmonofont = \TU/IosevkaFixed(0)/m/it/24.88, slantedsansboldfont = \TU/InterMedium(0)/b/sl/24.88, slantedromanboldfont = \TU/STIXTwoText-Regular.otf(0)/b/it/24.88, slantedmonoboldfont = \TU/IosevkaFixed(0)/b/it/24.88, tiny=5, scriptsize=7, footnotesize=8, small=9, normalsize=10, large=12, Large=14.4, LARGE=17.28, huge=20.74, Huge=24.88, baselineskip=12.0pt, columnsep=10.0pt, columnwidth=469.75502pt, evensidemargin=0.0pt, linewidth=469.75502pt, oddsidemargin=0.0pt, paperwidth=614.295pt, paperheight=794.96999pt, parindent=15.0pt, parskip=0.0pt plus 1.0pt, textheight=650.43001pt, textwidth=469.75502pt, topmargin=-37.0pt, unitlength=1.0pt, in=72.26999pt, cm=28.45274pt, mm=2.84526pt, em=10.0pt, ex=4.73pt, bp=1.00374pt, dd=1.07pt, pc=12.0pt####535#
r'\SI{%s}{%s}' % (signif(C_s_value*1e6, 3), r'\micro\farad')
=>PYTHONTEX#py#default#default#6#code#romanfont=\TU/STIXTwoText-Regular.otf(0)/m/n/24.88, romanboldfont=\TU/STIXTwoText-Regular.otf(0)/b/n/24.88, romanitalicfont=\TU/STIXTwoText-Regular.otf(0)/m/it/24.88, romanbolditalicfont=\TU/STIXTwoText-Regular.otf(0)/b/it/24.88, sansfont=\TU/InterMedium(0)/m/n/24.88, sansboldfont=\TU/InterMedium(0)/b/n/24.88, sansitalicfont=\TU/InterMedium(0)/b/n/24.88, sansbolditalicfont=\TU/InterMedium(0)/b/it/24.88, monofont=\TU/IosevkaFixed(0)/m/n/24.88, monoboldfont=\TU/IosevkaFixed(0)/b/n/24.88, monoitalicfont=\TU/IosevkaFixed(0)/m/it/24.88, monobolditalicfont=\TU/IosevkaFixed(0)/b/it/24.88, mathfont=\TU/STIXTwoMath-Regular.otf(1)/m/n/10, mathfontone=\OML/cmm/m/it/10, mathfonttwo=\TU/STIXTwoMath-Regular.otf(2)/m/n/10, mathfontthree=\TU/STIXTwoMath-Regular.otf(3)/m/n/10, scsansfont = \TU/InterMedium(0)/m/sc/24.88, scromanfont = \TU/STIXTwoText-Regular.otf(0)/m/sc/24.88, scmonofont = \TU/IosevkaFixed(0)/m/sc/24.88, scsansboldfont = \TU/InterMedium(0)/b/sc/24.88, scromanboldfont = \TU/STIXTwoText-Regular.otf(0)/b/sc/24.88, scmonoboldfont = \TU/IosevkaFixed(0)/b/sc/24.88, slantedsansfont = \TU/InterMedium(0)/b/sc/24.88, slantedromanfont = \TU/STIXTwoText-Regular.otf(0)/m/it/24.88, slantedmonofont = \TU/IosevkaFixed(0)/m/it/24.88, slantedsansboldfont = \TU/InterMedium(0)/b/sl/24.88, slantedromanboldfont = \TU/STIXTwoText-Regular.otf(0)/b/it/24.88, slantedmonoboldfont = \TU/IosevkaFixed(0)/b/it/24.88, tiny=5, scriptsize=7, footnotesize=8, small=9, normalsize=10, large=12, Large=14.4, LARGE=17.28, huge=20.74, Huge=24.88, baselineskip=12.0pt, columnsep=10.0pt, columnwidth=469.75502pt, evensidemargin=0.0pt, linewidth=469.75502pt, oddsidemargin=0.0pt, paperwidth=614.295pt, paperheight=794.96999pt, parindent=15.0pt, parskip=0.0pt plus 1.0pt, textheight=650.43001pt, textwidth=469.75502pt, topmargin=-37.0pt, unitlength=1.0pt, in=72.26999pt, cm=28.45274pt, mm=2.84526pt, em=10.0pt, ex=4.73pt, bp=1.00374pt, dd=1.07pt, pc=12.0pt####558#
V_OUT_NOM = 12
R_1 = np.zeros(NTRIALS)
V_ref = np.zeros(NTRIALS)
I_adj = np.zeros(NTRIALS)
R_2 = np.zeros(NTRIALS)
V_out = np.zeros(NTRIALS)

i = 0
while i < NTRIALS:
    R_1[i] = rng.triangular(1000*0.99, 1000, 1000*1.01)
    V_ref[i] = rng.triangular(1.25*0.99, 1.25, 1.25*1.01)
    I_adj[i] = rng.triangular(0.99*52e-6, 52e-6, 1.01*52e-6)
    R_2_NOM = find_closest_e_series_number(
        (V_OUT_NOM-V_ref[i]) / (I_adj[i]+V_ref[i]/R_1[i]),
        TOLERANCE
        )
    R_2[i] = rng.triangular(0.99*R_2_NOM, R_2_NOM, 1.01*R_2_NOM)
    V_out[i] = V_ref[i]*(1+(R_2[i]/R_1[i])) + I_adj[i]*R_2[i]
    i += 1

fig, ax = plt.subplots(1, 1)
ax.hist(V_out, bins='auto', label=r"$V_{out}=\SI{12}{\volt}_{nom.}$")
ax.xaxis.set_major_formatter(eng_format(r'\unit{\volt}'))
ax.set_xlabel(r'Post-Regulator Output Voltage')
ax.set_ylabel(r'Count $\left(1\right)$')
save_pythontex_figure(fig, 'analog_supply_post_reg_output_voltage')
=>PYTHONTEX#py#default#default#7#code#romanfont=\TU/STIXTwoText-Regular.otf(0)/m/n/24.88, romanboldfont=\TU/STIXTwoText-Regular.otf(0)/b/n/24.88, romanitalicfont=\TU/STIXTwoText-Regular.otf(0)/m/it/24.88, romanbolditalicfont=\TU/STIXTwoText-Regular.otf(0)/b/it/24.88, sansfont=\TU/InterMedium(0)/m/n/24.88, sansboldfont=\TU/InterMedium(0)/b/n/24.88, sansitalicfont=\TU/InterMedium(0)/b/n/24.88, sansbolditalicfont=\TU/InterMedium(0)/b/it/24.88, monofont=\TU/IosevkaFixed(0)/m/n/24.88, monoboldfont=\TU/IosevkaFixed(0)/b/n/24.88, monoitalicfont=\TU/IosevkaFixed(0)/m/it/24.88, monobolditalicfont=\TU/IosevkaFixed(0)/b/it/24.88, mathfont=\TU/STIXTwoMath-Regular.otf(1)/m/n/10, mathfontone=\OML/cmm/m/it/10, mathfonttwo=\TU/STIXTwoMath-Regular.otf(2)/m/n/10, mathfontthree=\TU/STIXTwoMath-Regular.otf(3)/m/n/10, scsansfont = \TU/InterMedium(0)/m/sc/24.88, scromanfont = \TU/STIXTwoText-Regular.otf(0)/m/sc/24.88, scmonofont = \TU/IosevkaFixed(0)/m/sc/24.88, scsansboldfont = \TU/InterMedium(0)/b/sc/24.88, scromanboldfont = \TU/STIXTwoText-Regular.otf(0)/b/sc/24.88, scmonoboldfont = \TU/IosevkaFixed(0)/b/sc/24.88, slantedsansfont = \TU/InterMedium(0)/b/sc/24.88, slantedromanfont = \TU/STIXTwoText-Regular.otf(0)/m/it/24.88, slantedmonofont = \TU/IosevkaFixed(0)/m/it/24.88, slantedsansboldfont = \TU/InterMedium(0)/b/sl/24.88, slantedromanboldfont = \TU/STIXTwoText-Regular.otf(0)/b/it/24.88, slantedmonoboldfont = \TU/IosevkaFixed(0)/b/it/24.88, tiny=5, scriptsize=7, footnotesize=8, small=9, normalsize=10, large=12, Large=14.4, LARGE=17.28, huge=20.74, Huge=24.88, baselineskip=12.0pt, columnsep=10.0pt, columnwidth=469.75502pt, evensidemargin=0.0pt, linewidth=469.75502pt, oddsidemargin=0.0pt, paperwidth=614.295pt, paperheight=794.96999pt, parindent=15.0pt, parskip=0.0pt plus 1.0pt, textheight=650.43001pt, textwidth=469.75502pt, topmargin=-37.0pt, unitlength=1.0pt, in=72.26999pt, cm=28.45274pt, mm=2.84526pt, em=10.0pt, ex=4.73pt, bp=1.00374pt, dd=1.07pt, pc=12.0pt####596#
V_OUT_NOM = 3.3
R_1 = np.zeros(NTRIALS)
V_ref = np.zeros(NTRIALS)
I_adj = np.zeros(NTRIALS)
R_2 = np.zeros(NTRIALS)
V_out = np.zeros(NTRIALS)

i = 0
while i < NTRIALS:
    R_1[i] = rng.triangular(120*0.99, 120, 120*1.01)
    V_ref[i] = rng.triangular(1.25*0.99, 1.25, 1.25*1.01)
    I_adj[i] = rng.triangular(0.99*52e-6, 52e-6, 1.01*52e-6)
    R_2_NOM = find_closest_e_series_number(
        (V_OUT_NOM-V_ref[i]) / (I_adj[i]+V_ref[i]/R_1[i]),
        TOLERANCE
        )
    R_2[i] = rng.triangular(0.99*R_2_NOM, R_2_NOM, 1.01*R_2_NOM)
    V_out[i] = V_ref[i]*(1+(R_2[i]/R_1[i])) + I_adj[i]*R_2[i]
    i += 1

fig, ax = plt.subplots(1, 1)
ax.hist(V_out, bins='auto', label=r"$V_{out}=\SI{12}{\volt}_{nom.}$")
ax.xaxis.set_major_formatter(eng_format(r'\unit{\volt}'))
ax.set_xlabel(r'Digital Supply Output Voltage')
ax.set_ylabel(r'Count $\left(1\right)$')
ax.legend(loc='upper left')
save_pythontex_figure(fig, '3v3_reg_output_voltage')
=>PYTHONTEX#py#default#default#8#i#romanfont=\TU/STIXTwoText-Regular.otf(0)/m/n/24.88, romanboldfont=\TU/STIXTwoText-Regular.otf(0)/b/n/24.88, romanitalicfont=\TU/STIXTwoText-Regular.otf(0)/m/it/24.88, romanbolditalicfont=\TU/STIXTwoText-Regular.otf(0)/b/it/24.88, sansfont=\TU/InterMedium(0)/m/n/24.88, sansboldfont=\TU/InterMedium(0)/b/n/24.88, sansitalicfont=\TU/InterMedium(0)/b/n/24.88, sansbolditalicfont=\TU/InterMedium(0)/b/it/24.88, monofont=\TU/IosevkaFixed(0)/m/n/24.88, monoboldfont=\TU/IosevkaFixed(0)/b/n/24.88, monoitalicfont=\TU/IosevkaFixed(0)/m/it/24.88, monobolditalicfont=\TU/IosevkaFixed(0)/b/it/24.88, mathfont=\TU/STIXTwoMath-Regular.otf(1)/m/n/10, mathfontone=\OML/cmm/m/it/10, mathfonttwo=\TU/STIXTwoMath-Regular.otf(2)/m/n/10, mathfontthree=\TU/STIXTwoMath-Regular.otf(3)/m/n/10, scsansfont = \TU/InterMedium(0)/m/sc/24.88, scromanfont = \TU/STIXTwoText-Regular.otf(0)/m/sc/24.88, scmonofont = \TU/IosevkaFixed(0)/m/sc/24.88, scsansboldfont = \TU/InterMedium(0)/b/sc/24.88, scromanboldfont = \TU/STIXTwoText-Regular.otf(0)/b/sc/24.88, scmonoboldfont = \TU/IosevkaFixed(0)/b/sc/24.88, slantedsansfont = \TU/InterMedium(0)/b/sc/24.88, slantedromanfont = \TU/STIXTwoText-Regular.otf(0)/m/it/24.88, slantedmonofont = \TU/IosevkaFixed(0)/m/it/24.88, slantedsansboldfont = \TU/InterMedium(0)/b/sl/24.88, slantedromanboldfont = \TU/STIXTwoText-Regular.otf(0)/b/it/24.88, slantedmonoboldfont = \TU/IosevkaFixed(0)/b/it/24.88, tiny=5, scriptsize=7, footnotesize=8, small=9, normalsize=10, large=12, Large=14.4, LARGE=17.28, huge=20.74, Huge=24.88, baselineskip=12.0pt, columnsep=10.0pt, columnwidth=469.75502pt, evensidemargin=0.0pt, linewidth=469.75502pt, oddsidemargin=0.0pt, paperwidth=614.295pt, paperheight=794.96999pt, parindent=15.0pt, parskip=0.0pt plus 1.0pt, textheight=650.43001pt, textwidth=469.75502pt, topmargin=-37.0pt, unitlength=1.0pt, in=72.26999pt, cm=28.45274pt, mm=2.84526pt, em=10.0pt, ex=4.73pt, bp=1.00374pt, dd=1.07pt, pc=12.0pt####626#
r'\SI{%s}{\ohm}' % (round(R_2_NOM))
=>PYTHONTEX:SETTINGS#
version=0.18
outputdir=pythontex-files-drd
workingdir=.
workingdirset=false
gobble=none
rerun=default
hashdependencies=default
makestderr=false
stderrfilename=full
keeptemps=none
pyfuture=default
pyconfuture=none
pygments=true
pygglobal=:GLOBAL||style=bw
fvextfile=-1
pyconbanner=none
pyconfilename=stdin
depythontex=false
pygfamily=py|python3|
pygfamily=pycon|pycon|
pygfamily=sympy|python3|
pygfamily=sympycon|pycon|
pygfamily=pylab|python3|
pygfamily=pylabcon|pycon|
