=>PYTHONTEX#py#default#default#0#code# textwidth=469.75502pt, textheight=650.43001pt, normalsize=12.0pt####99#

import numpy as np # Python numerical computing library

from cycler import cycler # Property cycler utilities
from matplotlib import pyplot as plt # Pyplot API
from matplotlib import rcParams as rc # Matplotlib plot styling
from matplotlib.ticker import EngFormatter # Plot tick formatting

# Convert from points to inches
text_width = float(pytex.context['textwidth'][:-2]) / 72.27
text_height = float(pytex.context['textheight'][:-2]) / 72.27

# Determine font sizes based on normalsize
# TODO: Can each fontsize be defined programmatically?
normal_size = float(pytex.context['normalsize'][:-2])
if normal_size == 10:
    tiny = 5
    script_size = 7
    footnote_size = 8
    small = 9
    large = 12
    llarge = 14.4
    lllarge = 17.28
    huge = 20.74
    hhuge = 24.88
elif normal_size == 11:
    tiny = 6
    script_size = 8
    footnote_size = 9
    small = 10
    large = 12
    llarge = 14.4
    lllarge = 17.28
    huge = 20.74
    hhuge = 24.88
elif normal_size == 12:
    tiny = 6
    script_size = 8
    footnote_size = 10
    small = 11
    large = 14.4
    llarge = 17.28
    lllarge = 20.74
    huge = 24.88
    hhuge = 24.88

golden_ratio = ( 1 + np.sqrt(5) ) / 2
num_plot_styles = 4 # number of colors for plotting

# Initialize lists for plot colors and styles
plot_colors = []
line_styles = []

cmap = plt.get_cmap('gray') # Select colormap

for i in range(num_plot_styles): # Populate the color and style lists
    plot_colors.append(cmap(1.0 * i/num_plot_styles))
    line_styles.append((0, (i+1, i)))

# Define the main cycler with the two component lists
style_cycler = cycler(color=plot_colors, linestyle=line_styles)

# Document-wide Matplotlib Configuration
rc.update({
        'backend': 'pgf',
        'lines.linewidth': 0.125*footnote_size,
        'font.family': 'serif',
        'font.size': footnote_size,
        'text.usetex': True,
        'legend.fontsize': footnote_size,
        'axes.formatter.use_locale': True,
        'axes.prop_cycle': style_cycler,
        'axes.labelsize': footnote_size,
        'xtick.direction': 'in',
        'xtick.top': True,
        'xtick.bottom': True,
        'xtick.minor.visible': True,
        'ytick.direction': 'in',
        'ytick.left': True,
        'ytick.right': True,
        'ytick.minor.visible': True,
        'legend.fancybox': False,
        'figure.figsize': (text_width, text_width/golden_ratio),
        'figure.dpi': 600,
	'figure.constrained_layout.use': True,
        'savefig.format': 'pdf',
        'savefig.transparent': True,
        'pgf.rcfonts': False,
	'pgf.preamble': '\n'.join([
                r'\usepackage[stixtwo]{fontsetup}',
                r'\usepackage{siunitx}',
		r'\usepackage[USenglish]{babel}',
	]),
        'pgf.texsystem': 'lualatex', # default is xetex
})

def eng_format(arg: str):
    return EngFormatter(unit=arg, sep=None)
=>PYTHONTEX#py#default#default#1#code# textwidth=469.75502pt, textheight=650.43001pt, normalsize=12.0pt####242#
min_freq = 0.3
max_freq = 100E6
frequency = np.logspace(np.log10(min_freq), np.log10(max_freq), 30000, base=10)

noise_spec_9V = []
noise_spec_LV = []
corner_freq_9V = 100
corner_freq_LV = 100

for freq in frequency:
    if freq < corner_freq_9V:
        noise_spec_9V.append(-40)
    else:
        noise_spec_9V.append(-60)

    if freq < corner_freq_LV:
        noise_spec_LV.append(-30)
    else:
        noise_spec_LV.append(-55)

fig, ax = plt.subplots(1, 1)
ax.plot(frequency, noise_spec_9V, label=r'\pm 9V Supply')
ax.plot(frequency, noise_spec_LV, label=r'+3.3V Supply')
ax.set_xscale('log')
ax.xaxis.set_major_formatter(eng_format(r'Hz'))
ax.yaxis.set_major_formatter(r'dBV')
ax.set_ylim(-100, 0)
ax.legend()
fig.savefig('psu_noiselim.pdf')
=>PYTHONTEX#py#default#default#2#block# textwidth=469.75502pt, textheight=650.43001pt, normalsize=12.0pt####304#
V_POS = 12
V_NEG = -12
V_IN = 8.55
V_FB1 = 0.8
V_FB2 = 0.8
V_REF = 1.6
I_OUT1 = 200E-3
I_OUT2 = -200E-3
R_FT1 = 1E6
R_FT2 = 1E6
R_FB1 = R_FT1 / ( (V_POS / V_FB1) - 1 )
R_FB2 = R_FT2 * (V_REF - V_FB2) / (V_FB2 - V_NEG)
print(f"R_FT1 = {R_FT1} 立")
print(f"R_FB1 = {R_FB1} 立")
print(f"R_FT2 = {R_FT2} 立")
print(f"R_FB2 = {R_FB2} 立")
=>PYTHONTEX#py#default#default#3#block# textwidth=469.75502pt, textheight=650.43001pt, normalsize=12.0pt####364#
C_OUT = 20E-6
D_TEMP = 0.014
D_BIAS = 0.120
D_TOL = 0.200
C_OUT_ESR = 2.5E-3
C_OUT_EFF = C_OUT * ( 1 - D_TEMP ) * ( 1 - D_BIAS ) * ( 1 - D_TOL )
print(r'C_OUT_EFF = ' + f'{C_OUT_EFF}')
=>PYTHONTEX#py#default#default#4#block# textwidth=469.75502pt, textheight=650.43001pt, normalsize=12.0pt####378#
C_PV_IN = 22E-6
C_PV_INSYS = 22E-6
=>PYTHONTEX#py#default#default#5#block# textwidth=469.75502pt, textheight=650.43001pt, normalsize=12.0pt####387#
C_VREG = 1E-6
=>PYTHONTEX#py#default#default#6#block# textwidth=469.75502pt, textheight=650.43001pt, normalsize=12.0pt####395#
C_VREG = 1E-6
=>PYTHONTEX#py#default#default#7#block# textwidth=469.75502pt, textheight=650.43001pt, normalsize=12.0pt####403#

fig, ax = plt.subplots(1, 1)
R_SOFT_START = np.linspace(50E3, 268E3, 800)
t_SOFT_START = 38.4E-3 - 1.28E-7 * R_SOFT_START

ax.plot(R_SOFT_START, t_SOFT_START, label='Soft Start Resistor Values')

R_SOFT_START = 71.5E3
t_SOFT_START = 38.4E-3 - 1.28E-7 * R_SOFT_START

ax.plot(R_SOFT_START, t_SOFT_START, label='Selected Resistance')

ax.yaxis.set_major_formatter(eng_format(r'\unit{\second}'))
ax.xaxis.set_major_formatter(r'\unit{\ohm}')

ax.legend()
fig.savefig('psu_softstart.pdf')

=>PYTHONTEX#py#default#default#8#block# textwidth=469.75502pt, textheight=650.43001pt, normalsize=12.0pt####434#
V_DF = 450E-3
C_D = 90E-12
=>PYTHONTEX#py#default#default#9#block# textwidth=469.75502pt, textheight=650.43001pt, normalsize=12.0pt####465#
f_SW = 2.4E6
DUTY_1 = ( V_POS - V_IN + V_DF ) / (V_POS + V_DF)
I_IN = I_OUT1 / ( 1 - DUTY_1 )
T_ON1 = DUTY_1 / f_SW
L1 = V_IN * T_ON1 * ( 1 - DUTY_1) / ( 0.3 * I_OUT1)
L1_MIN = 1E-6 * V_IN * ( ( 0.27 / (1 - DUTY_1)) - 0.33)
print("L1 =", L1)
print("L1_MIN =", L1_MIN)
=>PYTHONTEX#py#default#default#10#block# textwidth=469.75502pt, textheight=650.43001pt, normalsize=12.0pt####504#
DUTY_2 = ( np.abs(V_NEG) + V_DF ) / ( V_IN + np.abs(V_NEG) + V_DF )
I_L2 = I_OUT2 / ( 1 - DUTY_2 )
t_ON2 = DUTY_2 / f_SW
L2 = V_IN * t_ON2 * ( 1 - DUTY_2 ) / ( 0.3 * np.abs(I_OUT2) )
L2_MIN = 1E-6 * V_IN * ( ( 0.27 / ( 1 - DUTY_2)) - 0.33 )
print("L2 =", L2)
print("L2_MIN =", L2_MIN)
=>PYTHONTEX#py#default#default#11#block# textwidth=469.75502pt, textheight=650.43001pt, normalsize=12.0pt####575#
R_LOAD1 = V_POS / I_OUT1
f_Z1_RHP = ( R_LOAD1 * ( 1 - DUTY_1 )**2 ) / ( 2*np.pi * L1 )
f_C1 = f_Z1_RHP * 95E-3
V_FB1 = V_POS * R_FB1 / ( R_FB1 + R_FT1 )
G_M1 = 300E-6 # from datasheet
G_CS1 = 6.25 # from datasheet
R_C1 = ( 2*np.pi * f_C1 * C_OUT_EFF * V_POS**2 ) / ( V_FB1 * V_IN * G_M1 * G_CS1 )
C_C1 = 2 / ( np.pi * f_C1 * R_C1 )
C_B1 = C_OUT_ESR * C_OUT / R_C1
print("R_C1 =", R_C1)
print("C_C1 =", C_C1)
print("C_B1 =", C_B1)
=>PYTHONTEX#py#default#default#12#block# textwidth=469.75502pt, textheight=650.43001pt, normalsize=12.0pt####596#
R_LOAD2 = V_NEG / I_OUT2
f_Z2_RHP = ( R_LOAD2 * ( 1 - DUTY_2 )**2 ) / ( 2*np.pi * L2 * DUTY_2 )
f_C2 = f_Z2_RHP * 95E-3
V_FB2 = V_NEG * R_FT2 / ( R_FB2 + R_FT2 )
G_M2 = 300E-6 # from datasheet
G_CS2 = 6.25 # from datasheet
R_C2 = ( 2*np.pi * f_C2 * C_OUT_EFF * np.abs(V_NEG) * ( V_IN + ( 2 * np.abs(V_NEG) ) ) )
R_C2 = R_C2 / ( np.abs(V_FB2) * V_IN * G_M2 * G_CS2 )
C_C2 = 2 / ( np.pi * f_C2 * R_C2 )
C_B2 = C_OUT_ESR * C_OUT / R_C2
print("R_C2 =", R_C2)
print("C_C2 =", C_C2)
print("C_B2 =", C_B2)
=>PYTHONTEX:SETTINGS#
version=0.18
outputdir=pythontex-files-drd
workingdir=.
workingdirset=false
gobble=none
rerun=default
hashdependencies=default
makestderr=false
stderrfilename=full
keeptemps=none
pyfuture=default
pyconfuture=none
pygments=true
pygglobal=:GLOBAL||style=algol, texcomments=true, mathescape=true
fvextfile=-1
pyconbanner=none
pyconfilename=stdin
depythontex=false
pygfamily=py|python3|
pygfamily=pycon|pycon|
pygfamily=sympy|python3|
pygfamily=sympycon|pycon|
pygfamily=pylab|python3|
pygfamily=pylabcon|pycon|
